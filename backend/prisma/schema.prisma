// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  agents Agent[]
  
  @@map("users")
}

model Agent {
  id              String   @id @default(cuid())
  userId          String
  name            String   // Название продукта/агента
  description     String   // Описание продукта
  websiteUrl      String?  // URL сайта (опционально)
  knowledgeBase   String?  // База знаний в текстовом формате
  settings        String?  // JSON строка с настройками
  widgetCode      String   @unique
  isActive        Boolean  @default(true)
  
  // AI Configuration
  systemPrompt    String?
  responseStyle   String   @default("helpful") // helpful, formal, casual, technical
  
  // Analytics
  totalChats      Int      @default(0)
  totalMessages   Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations   Conversation[]
  knowledgeFiles  KnowledgeBase[]
  
  @@map("agents")
}

model Conversation {
  id        String   @id @default(cuid())
  agentId   String
  sessionId String   // Уникальный ID сессии пользователя
  messages  Json     // Массив сообщений [{role, content, timestamp}]
  userIp    String?
  userAgent String?
  
  // Metadata
  isResolved    Boolean @default(false)
  rating        Int?    // 1-5 рейтинг от пользователя
  feedbackText  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@map("conversations")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  agentId     String
  fileName    String
  filePath    String
  fileType    String   // pdf, docx, txt
  fileSize    Int
  content     String   // Извлеченный текст
  isProcessed Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@map("knowledge_base")
} 