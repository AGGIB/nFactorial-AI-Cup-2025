import axios from 'axios';
import { prisma } from '../index';
import { PageAnalysisData } from './screenshotService';
import { screenshotService } from './screenshotService';

interface AIRequestParams {
  message: string;
  history: Array<{ role: string; content: string; timestamp: string }>;
  agent: {
    businessName: string;
    businessDesc: string;
    systemPrompt?: string;
    responseStyle?: string;
    knowledgeBase?: string;
  };
  sessionId?: string;
  userInfo?: {
    ip?: string;
    userAgent?: string;
  };
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
interface ActionResult {
  success: boolean;
  message: string;
  data?: any;
}

const availableActions = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏/–æ–±—Ä–∞—â–µ–Ω–∏—è
  createTicket: async (params: { 
    title: string; 
    description: string; 
    email?: string; 
    priority?: 'low' | 'medium' | 'high' 
  }): Promise<ActionResult> => {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å CRM –∏–ª–∏ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—è–≤–æ–∫
      const ticketId = `T${Date.now()}`;
      
      console.log('–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞:', {
        id: ticketId,
        ...params,
        createdAt: new Date()
      });

      return {
        success: true,
        message: `–ó–∞—è–≤–∫–∞ #${ticketId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
        data: { ticketId, ...params }
      };
    } catch (error) {
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      };
    }
  },

  // –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  searchKnowledge: async (params: { 
    query: string; 
    knowledgeBase?: string 
  }): Promise<ActionResult> => {
    try {
      const { query, knowledgeBase } = params;
      
      if (!knowledgeBase) {
        return {
          success: false,
          message: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        };
      }

      // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      const keywords = query.toLowerCase().split(' ');
      const knowledge = knowledgeBase.toLowerCase();
      
      const relevantSections = knowledgeBase
        .split('\n')
        .filter(line => 
          keywords.some(keyword => 
            line.toLowerCase().includes(keyword)
          )
        )
        .slice(0, 3);

      return {
        success: true,
        message: relevantSections.length > 0 
          ? `–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n${relevantSections.join('\n')}`
          : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        data: { relevantSections }
      };
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π'
      };
    }
  },

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  subscribeUpdates: async (params: { 
    email: string; 
    topics?: string[] 
  }): Promise<ActionResult> => {
    try {
      const { email, topics = ['general'] } = params;
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å email-—Å–µ—Ä–≤–∏—Å–æ–º
      console.log('–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:', {
        email,
        topics,
        subscribedAt: new Date()
      });

      return {
        success: true,
        message: `–°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å—É ${email}`,
        data: { email, topics }
      };
    } catch (error) {
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
      };
    }
  },

  // –ó–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É/–¥–µ–º–æ
  scheduleDemo: async (params: { 
    email: string; 
    name?: string; 
    preferredTime?: string;
    message?: string;
  }): Promise<ActionResult> => {
    try {
      const meetingId = `M${Date.now()}`;
      
      console.log('–ó–∞–ø–∏—Å—å –Ω–∞ –¥–µ–º–æ:', {
        id: meetingId,
        ...params,
        scheduledAt: new Date()
      });

      return {
        success: true,
        message: `–û—Ç–ª–∏—á–Ω–æ! –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–µ–º–æ #${meetingId} –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ email ${params.email} –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.`,
        data: { meetingId, ...params }
      };
    } catch (error) {
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –¥–µ–º–æ'
      };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  getContacts: async (): Promise<ActionResult> => {
    return {
      success: true,
      message: `–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
üìß Email: support@company.com
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00 (–ú–°–ö)
üí¨ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!`,
      data: {
        email: 'support@company.com',
        phone: '+7 (999) 123-45-67',
        workingHours: '–ü–Ω-–ü—Ç 9:00-18:00 (–ú–°–ö)'
      }
    };
  },

  // === BROWSER AUTOMATION ACTIONS ===
  
  // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É/—ç–ª–µ–º–µ–Ω—Ç
  clickButton: async (params: { 
    buttonText: string; 
    url: string;
    pageContext?: any;
  }): Promise<ActionResult> => {
    try {
      console.log(`üñ±Ô∏è AI clicking button: "${params.buttonText}" on ${params.url}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
      const findResult = await screenshotService.findButtonByText(params.url, params.buttonText);
      
      if (!findResult.success) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        const alternatives = [
          params.buttonText.toLowerCase(),
          params.buttonText.toUpperCase(),
          params.buttonText.charAt(0).toUpperCase() + params.buttonText.slice(1).toLowerCase(),
          params.buttonText.replace(/\s+/g, ' ').trim()
        ];
        
        for (const alt of alternatives) {
          if (alt !== params.buttonText) {
            console.log(`üîÑ Trying alternative: "${alt}"`);
            const altResult = await screenshotService.findButtonByText(params.url, alt);
            if (altResult.success && altResult.selector) {
              console.log(`‚úÖ Found with alternative text: "${alt}"`);
              
              const clickResult = await screenshotService.clickElement(params.url, altResult.selector, {
                waitForNavigation: true
              });
              
              if (clickResult.success) {
                return {
                  success: true,
                  message: `‚úÖ –ö–Ω–æ–ø–∫–∞ "${params.buttonText}" —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞! ${clickResult.newUrl ? `–ü–µ—Ä–µ—à–ª–∏ –Ω–∞: ${clickResult.newUrl}` : ''}`,
                  data: { newUrl: clickResult.newUrl }
                };
              }
            }
          }
        }
        
        return {
          success: false,
          message: `–ö–Ω–æ–ø–∫–∞ "${params.buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –Ω–µ –≤–∏–¥–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.`
        };
      }
      
      // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
      const clickResult = await screenshotService.clickElement(params.url, findResult.selector!, {
        waitForNavigation: true
      });
      
      if (clickResult.success) {
        return {
          success: true,
          message: `‚úÖ –ö–Ω–æ–ø–∫–∞ "${params.buttonText}" —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞! ${clickResult.newUrl ? `–ü–µ—Ä–µ—à–ª–∏ –Ω–∞: ${clickResult.newUrl}` : ''}`,
          data: { newUrl: clickResult.newUrl }
        };
      } else {
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥
        console.log(`üîÑ Direct click failed, trying fallback approach...`);
        
        const fallbackResult = await screenshotService.clickElement(params.url, params.buttonText, {
          waitForNavigation: false
        });
        
        if (fallbackResult.success) {
          return {
            success: true,
            message: `‚úÖ –ö–Ω–æ–ø–∫–∞ "${params.buttonText}" –Ω–∞–∂–∞—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º)! ${fallbackResult.newUrl ? `–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${fallbackResult.newUrl}` : ''}`,
            data: { newUrl: fallbackResult.newUrl }
          };
        }
        
        return {
          success: false,
          message: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "${params.buttonText}": ${clickResult.message}`
        };
      }
    } catch (error) {
      console.error('Error clicking button:', error);
      return {
        success: false,
        message: `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "${params.buttonText}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ-–¥—Ä—É–≥–æ–º—É.`
      };
    }
  },

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  registerUser: async (params: {
    email: string;
    password?: string;
    name?: string;
    url: string;
  }): Promise<ActionResult> => {
    try {
      console.log(`üìù AI registering user: ${params.email} on ${params.url}`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
      const password = params.password || `Bloop${Math.random().toString(36).slice(-6)}!`;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const formSelectors = {
        'input[type="email"]': params.email,
        'input[name="email"]': params.email,
        'input[placeholder*="email"]': params.email,
        'input[placeholder*="Email"]': params.email,
        
        'input[type="password"]': password,
        'input[name="password"]': password,
        'input[placeholder*="password"]': password,
        'input[placeholder*="Password"]': password,
        'input[placeholder*="–ø–∞—Ä–æ–ª—å"]': password,
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (params.name) {
        Object.assign(formSelectors, {
          'input[name="name"]': params.name,
          'input[placeholder*="name"]': params.name,
          'input[placeholder*="Name"]': params.name,
          'input[placeholder*="–∏–º—è"]': params.name,
        });
      }
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
      const fillResult = await screenshotService.fillForm(params.url, formSelectors);
      
      if (fillResult.success) {
        // –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        const submitButtons = ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'Register', 'Sign Up', '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', '–í–æ–π—Ç–∏'];
        
        for (const buttonText of submitButtons) {
          const findResult = await screenshotService.findButtonByText(fillResult.newUrl || params.url, buttonText);
          
          if (findResult.success && findResult.selector) {
            const clickResult = await screenshotService.clickElement(
              fillResult.newUrl || params.url, 
              findResult.selector,
              { waitForNavigation: true }
            );
            
            if (clickResult.success) {
              return {
                success: true,
                message: `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! Email: ${params.email}, –ü–∞—Ä–æ–ª—å: ${password}. ${clickResult.newUrl ? `–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${clickResult.newUrl}` : ''}`,
                data: { 
                  email: params.email, 
                  password,
                  newUrl: clickResult.newUrl 
                }
              };
            }
          }
        }
        
        return {
          success: true,
          message: `‚úÖ –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! Email: ${params.email}, –ü–∞—Ä–æ–ª—å: ${password}. –ù–∞–∂–º–∏—Ç–µ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.`,
          data: { email: params.email, password }
        };
      } else {
        return {
          success: false,
          message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${fillResult.message}`
        };
      }
    } catch (error) {
      console.error('Error registering user:', error);
      return {
        success: false,
        message: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      };
    }
  },

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç—É
  navigateToPage: async (params: {
    url: string;
    targetPage: string; // 'login', 'register', 'dashboard', etc.
    currentUrl: string;
  }): Promise<ActionResult> => {
    try {
      console.log(`üß≠ AI navigating to: ${params.targetPage}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫/—Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const navigationMap: Record<string, string[]> = {
        login: ['–í–æ–π—Ç–∏', 'Login', 'Sign In', '–í—Ö–æ–¥'],
        register: ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'Register', 'Sign Up', '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'],
        dashboard: ['Dashboard', '–ü–∞–Ω–µ–ª—å', '–ì–ª–∞–≤–Ω–∞—è', 'Home'],
        profile: ['–ü—Ä–æ—Ñ–∏–ª—å', 'Profile', 'Account', '–ê–∫–∫–∞—É–Ω—Ç'],
        settings: ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'Settings', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è']
      };
      
      const buttonTexts = navigationMap[params.targetPage.toLowerCase()] || [params.targetPage];
      
      for (const buttonText of buttonTexts) {
        const findResult = await screenshotService.findButtonByText(params.currentUrl, buttonText);
        
        if (findResult.success && findResult.selector) {
          const clickResult = await screenshotService.clickElement(
            params.currentUrl,
            findResult.selector,
            { waitForNavigation: true }
          );
          
          if (clickResult.success) {
            return {
              success: true,
              message: `‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "${params.targetPage}"! –¢–µ–∫—É—â–∏–π URL: ${clickResult.newUrl}`,
              data: { newUrl: clickResult.newUrl }
            };
          }
        }
      }
      
      return {
        success: false,
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "${params.targetPage}"`
      };
      
    } catch (error) {
      console.error('Error navigating:', error);
      return {
        success: false,
        message: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
      };
    }
  },

  // === EXISTING ACTIONS ===
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –≤—ã–∑–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π
const detectIntentAndExecuteAction = async (
  message: string, 
  agent: AIRequestParams['agent'],
  sessionId?: string,
  pageContext?: any
): Promise<string | null> => {
  const lowerMessage = message.toLowerCase();
  const currentUrl = pageContext?.url || 'http://localhost:3000/';

  // === BROWSER AUTOMATION ACTIONS ===
  
  // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
  if (lowerMessage.includes('–Ω–∞–∂–º–∏') || 
      lowerMessage.includes('–∫–ª–∏–∫–Ω–∏') ||
      lowerMessage.includes('–Ω–∞–∂–∞—Ç—å') ||
      lowerMessage.includes('–∫–ª–∏–∫–Ω—É—Ç—å')) {
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const buttonPatterns = [
      /–Ω–∞–∂–º–∏[\s"']*([^"'\n]+?)[\s"']*/i,
      /–∫–ª–∏–∫–Ω–∏[\s"']*([^"'\n]+?)[\s"']*/i,
      /–Ω–∞–∂–∞—Ç—å[\s"']*([^"'\n]+?)[\s"']*/i,
      /–∫–ª–∏–∫–Ω—É—Ç—å[\s"']*([^"'\n]+?)[\s"']*/i
    ];
    
    for (const pattern of buttonPatterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        let buttonText = match[1].trim();
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const buttonAliases: Record<string, string> = {
          '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É': '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É',
          '–≤–æ–π—Ç–∏': '–í–æ–π—Ç–∏',
          '–ª–æ–≥–∏–Ω': '–í–æ–π—Ç–∏',
          '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
          '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
          '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ': '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
          '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å': '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
          '–Ω–∞—á–∞—Ç—å': '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É',
          '—Å—Ç–∞—Ä—Ç': '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'
        };
        
        buttonText = buttonAliases[buttonText.toLowerCase()] || buttonText;
        
        console.log(`üéØ Normalized button text: "${buttonText}"`);
        
        const result = await availableActions.clickButton({
          buttonText,
          url: currentUrl,
          pageContext
        });
        
        return result.message;
      }
    }
    
    return '–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: "–Ω–∞–∂–º–∏ –≤–æ–π—Ç–∏", "–∫–ª–∏–∫–Ω–∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" –∏–ª–∏ "–Ω–∞–∂–∞—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"';
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if ((lowerMessage.includes('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä') || 
       lowerMessage.includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü') ||
       lowerMessage.includes('—Å–æ–∑–¥–∞–π –∞–∫–∫–∞—É–Ω—Ç') ||
       lowerMessage.includes('register')) && 
      (lowerMessage.includes('@') || lowerMessage.includes('email') || lowerMessage.includes('–ø–æ—á—Ç'))) {
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const emailMatch = message.match(/[\w._%+-]+@[\w.-]+\.[A-Za-z]{2,}/);
    if (emailMatch) {
      const email = emailMatch[0];
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
      const namePatterns = [
        /–º–µ–Ω—è –∑–æ–≤—É—Ç\s+([^\s]+)/i,
        /–∏–º—è\s+([^\s]+)/i,
        /name\s+([^\s]+)/i
      ];
      
      let name;
      for (const pattern of namePatterns) {
        const match = message.match(pattern);
        if (match && match[1]) {
          name = match[1].trim();
          break;
        }
      }
      
      const result = await availableActions.registerUser({
        email,
        name,
        url: currentUrl
      });
      
      return result.message;
    }
    
    return '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –º–µ–Ω—è –Ω–∞ user@example.com"';
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç—É
  if (lowerMessage.includes('–ø–µ—Ä–µ–π–¥–∏') || 
      lowerMessage.includes('–æ—Ç–∫—Ä–æ–π') ||
      lowerMessage.includes('–ø–µ—Ä–µ—Ö–æ–¥') ||
      lowerMessage.includes('–∏–¥—Ç–∏')) {
    
    const navigationKeywords = {
      '–≤—Ö–æ–¥': 'login',
      '–≤–æ–π—Ç–∏': 'login', 
      '–ª–æ–≥–∏–Ω': 'login',
      '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü': 'login',
      '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü': 'register',
      'sign up': 'register',
      'dashboard': 'dashboard',
      '–ø–∞–Ω–µ–ª—å': 'dashboard',
      '–≥–ª–∞–≤–Ω–∞—è': 'dashboard',
      '–ø—Ä–æ—Ñ–∏–ª—å': 'profile',
      '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏': 'settings'
    };
    
    for (const [keyword, targetPage] of Object.entries(navigationKeywords)) {
      if (lowerMessage.includes(keyword)) {
        const result = await availableActions.navigateToPage({
          url: currentUrl,
          targetPage,
          currentUrl
        });
        
        return result.message;
      }
    }
  }

  // === EXISTING ACTIONS ===

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
  if (lowerMessage.includes('—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É') || 
      lowerMessage.includes('–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É') ||
      lowerMessage.includes('–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å') && lowerMessage.includes('–∑–∞—è–≤–∫–∞')) {
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
    const emailMatch = message.match(/[\w._%+-]+@[\w.-]+\.[A-Za-z]{2,}/);
    const email = emailMatch ? emailMatch[0] : undefined;
    
    const result = await availableActions.createTicket({
      title: '–û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç',
      description: message,
      email,
      priority: 'medium'
    });
    
    return result.message;
  }

  // –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  if (lowerMessage.includes('–Ω–∞–π–¥–∏') || 
      lowerMessage.includes('–ø–æ–∏—Å–∫') ||
      lowerMessage.includes('—Ä–∞—Å—Å–∫–∞–∂–∏ –æ') ||
      lowerMessage.includes('—á—Ç–æ —Ç–∞–∫–æ–µ')) {
    
    const result = await availableActions.searchKnowledge({
      query: message,
      knowledgeBase: agent.knowledgeBase
    });
    
    return result.message;
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if (lowerMessage.includes('–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è') || 
      lowerMessage.includes('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è') ||
      lowerMessage.includes('—Ä–∞—Å—Å—ã–ª–∫–∞')) {
    
    const emailMatch = message.match(/[\w._%+-]+@[\w.-]+\.[A-Za-z]{2,}/);
    if (emailMatch) {
      const result = await availableActions.subscribeUpdates({
        email: emailMatch[0]
      });
      return result.message;
    }
    
    return '–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å.';
  }

  // –ó–∞–ø–∏—Å—å –Ω–∞ –¥–µ–º–æ
  if (lowerMessage.includes('–¥–µ–º–æ') || 
      lowerMessage.includes('–≤—Å—Ç—Ä–µ—á–∞') ||
      lowerMessage.includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è') ||
      lowerMessage.includes('–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç')) {
    
    const emailMatch = message.match(/[\w._%+-]+@[\w.-]+\.[A-Za-z]{2,}/);
    if (emailMatch) {
      const result = await availableActions.scheduleDemo({
        email: emailMatch[0],
        message: message
      });
      return result.message;
    }
    
    return '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–µ–º–æ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å.';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  if (lowerMessage.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || 
      lowerMessage.includes('—Å–≤—è–∑–∞—Ç—å—Å—è') ||
      lowerMessage.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') ||
      lowerMessage.includes('email') ||
      lowerMessage.includes('–ø–æ–¥–¥–µ—Ä–∂–∫–∞')) {
    
    const result = await availableActions.getContacts();
    return result.message;
  }

  return null; // –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
};

export const generateAIResponse = async (params: AIRequestParams): Promise<string> => {
  try {
    const { message, history, agent, sessionId, userInfo } = params;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    const actionResult = await detectIntentAndExecuteAction(message, agent, sessionId, userInfo);
    if (actionResult) {
      return actionResult;
    }

    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
    const systemPrompt = agent.systemPrompt || `
–¢—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ "${agent.businessName}".

–û–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: ${agent.businessDesc}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
- –ü–æ–º–æ–≥–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º —Å–∞–π—Ç–∞
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —É—Å–ª—É–≥–∞—Ö
- –ù–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –Ω—É–∂–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º
- –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –í–´–ü–û–õ–ù–Ø–¢–¨ –î–ï–ô–°–¢–í–ò–Ø –ù–ê –°–ê–ô–¢–ï

ü§ñ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò –ë–†–ê–£–ó–ï–†–ê:
üñ±Ô∏è –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ - "–Ω–∞–∂–º–∏ –≤–æ–π—Ç–∏", "–∫–ª–∏–∫–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–Ω–∞–∂–∞—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –º–µ–Ω—è –Ω–∞ email@example.com"
üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç—É - "–ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –≤—Ö–æ–¥", "–æ—Ç–∫—Ä–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
üìã –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

–°–¢–ê–ù–î–ê–†–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - "—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - "–Ω–∞–π–¥–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ", "—á—Ç–æ —Ç–∞–∫–æ–µ"
üìß –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –¥–µ–º–æ - "–¥–µ–º–æ", "–≤—Å—Ç—Ä–µ—á–∞", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
üìû –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "—Å–≤—è–∑–∞—Ç—å—Å—è", "—Ç–µ–ª–µ—Ñ–æ–Ω"

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: ${agent.responseStyle || 'helpful'}

${agent.knowledgeBase ? `
–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏:
${agent.knowledgeBase}
` : ''}

–í–ê–ñ–ù–û: 
- –¢—ã –º–æ–∂–µ—à—å –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–∞–π—Ç–µ
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É - —Ç—ã —ç—Ç–æ –¥–µ–ª–∞–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –ö–æ–≥–¥–∞ –ø—Ä–æ—Å—è—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å - —Ç—ã –∑–∞–ø–æ–ª–Ω—è–µ—à—å —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –µ—ë
- –ù–µ –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å - –î–ï–õ–ê–ô —ç—Ç–æ —Å–∞–º!
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ü–æ–º–Ω–∏: —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
`;

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
    const messages = [
      {
        role: 'system',
        content: systemPrompt
      },
      // –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      ...history.slice(-8).map(msg => ({
        role: msg.role,
        content: msg.content
      })),
      {
        role: 'user',
        content: message
      }
    ];

    // –ó–∞–ø—Ä–æ—Å –∫ OpenRouter API
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: process.env.OPENROUTER_MODEL || 'qwen/qwen2.5-vl-32b-instruct:free',
        messages: messages,
        max_tokens: 500,
        temperature: 0.7,
        top_p: 0.9,
        stream: false
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': process.env.FRONTEND_URL || 'http://localhost:3000',
          'X-Title': 'Bloop.ai - AI Agent Platform'
        },
        timeout: 30000 // 30 seconds timeout
      }
    );

    if (response.data?.choices?.[0]?.message?.content) {
      return response.data.choices[0].message.content.trim();
    } else {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI API');
    }

  } catch (error: any) {
    console.error('AI Service Error:', error.response?.data || error.message);
    
    // Fallback responses
    if (error.response?.status === 429) {
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.';
    } else if (error.response?.status === 401) {
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else {
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.';
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ)
export const analyzeSite = async (websiteUrl: string): Promise<{
  description: string;
  features: string[];
  pages: string[];
}> => {
  try {
    // TODO: Implement website analysis using Puppeteer + AI
    // For now, return a basic structure
    return {
      description: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Å–∞–π—Ç: ${websiteUrl}`,
      features: ['–í–µ–±-—Å–∞–π—Ç', '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
      pages: ['–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞']
    };
  } catch (error) {
    console.error('Site Analysis Error:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∞–π—Ç–∞');
  }
};

export const aiService = {
  generateResponse: generateAIResponse,
  analyzeSite,
  
  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é vision –º–æ–¥–µ–ª–∏
  async analyzePageWithVision(params: {
    screenshot: string;
    pageData: PageAnalysisData;
    agentId: string;
  }): Promise<string> {
    try {
      const systemPrompt = `–¢—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø–æ–Ω—è—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –∏ –¥–∞–Ω–Ω—ã–º.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ–ø–∏—à–∏:
1. –ß—Ç–æ —ç—Ç–æ –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–≥–ª–∞–≤–Ω–∞—è, –∫–∞—Ç–∞–ª–æ–≥, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ç.–¥.)
2. –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∫–Ω–æ–ø–∫–∏, —Ñ–æ—Ä–º—ã, –º–µ–Ω—é)
3. –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—â–µ—Ç –∏–ª–∏ –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
4. –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;

      const userPrompt = `–î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${params.pageData.title}
URL: ${params.pageData.url}
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: ${params.pageData.buttons.join(', ')}
–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: ${params.pageData.headings.join(', ')}
–§–æ—Ä–º—ã: ${params.pageData.forms.length} —à—Ç.
–°—Å—ã–ª–∫–∏: ${params.pageData.links.length} —à—Ç.

–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: ${params.pageData.text.substring(0, 500)}...

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É.`;

      const requestPayload = {
        model: "qwen/qwen2.5-vl-32b-instruct:free",
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user", 
            content: [
              {
                type: "text",
                text: userPrompt
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${params.screenshot}`
                }
              }
            ]
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      };

      console.log('üîç Sending vision analysis request...');

      const response = await axios.post(
        'https://openrouter.ai/api/v1/chat/completions',
        requestPayload,
        {
          headers: {
            'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': 'https://bloop.ai',
            'X-Title': 'Bloop.ai Vision Analysis'
          },
          timeout: 30000
        }
      );

      const aiResponse = response.data.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É';
      
      console.log('‚úÖ Vision analysis completed');
      return aiResponse;

    } catch (error) {
      console.error('‚ùå Vision analysis error:', error);
      throw new Error('Failed to analyze page with vision');
    }
  },

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async chatWithPageContext(params: {
    message: string;
    pageData: {
      screenshot: string;
      analysis: PageAnalysisData;
      visualDescription: string;
    };
    agentId: string;
    sessionId: string;
  }): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
      const agent = await prisma.agent.findUnique({
        where: { id: params.agentId }
      });

      if (!agent) {
        throw new Error('Agent not found');
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
      const actionResult = await detectIntentAndExecuteAction(
        params.message, 
        {
          businessName: agent.businessName || '',
          businessDesc: agent.businessDesc || '',
          knowledgeBase: agent.knowledgeBase || '',
          systemPrompt: agent.systemPrompt || '',
          responseStyle: agent.responseStyle || ''
        },
        params.sessionId,
        { url: params.pageData.analysis.url, title: params.pageData.analysis.title }
      );

      if (actionResult) {
        return actionResult;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è vision –∞–Ω–∞–ª–∏–∑–∞
      const hasScreenshot = params.pageData.screenshot && params.pageData.screenshot.length > 0;
      
      const systemPrompt = `–¢—ã ${agent.agentName} - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è ${agent.businessName}.
${agent.businessDesc}

–í–ê–ñ–ù–û: ${hasScreenshot ? '–¢—ã –≤–∏–¥–∏—à—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π!' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${params.pageData.analysis.title}
- URL: ${params.pageData.analysis.url}
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: ${params.pageData.analysis.buttons.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
- –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${params.pageData.analysis.headings.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º: ${params.pageData.analysis.forms.length}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: ${params.pageData.analysis.links.length}

–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${params.pageData.visualDescription}

${agent.knowledgeBase ? `–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n${agent.knowledgeBase}` : ''}

–¢—ã –º–æ–∂–µ—à—å:
1. ${hasScreenshot ? '–û–±—ä—è—Å–Ω–∏—Ç—å —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ' : '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'}
2. –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–∞—Ç—å (–µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
3. –ü–æ–º–æ—á—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
4. –ù–∞–ø—Ä–∞–≤–∏—Ç—å –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É
5. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ

${agent.systemPrompt || ''}

–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤: ${agent.responseStyle || '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–º–æ–≥–∞—é—â–∏–π'}

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏.`;

      if (hasScreenshot) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º vision –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
        const requestPayload = {
          model: "qwen/qwen2.5-vl-32b-instruct:free",
          messages: [
            {
              role: "system",
              content: systemPrompt
            },
            {
              role: "user",
              content: [
                {
                  type: "text", 
                  text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "${params.pageData.analysis.title}" –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: ${params.message}`
                },
                {
                  type: "image_url",
                  image_url: {
                    url: `data:image/jpeg;base64,${params.pageData.screenshot}`
                  }
                }
              ]
            }
          ],
          max_tokens: 800,
          temperature: 0.8
        };

        console.log(`üí≠ Processing contextual chat with vision for page: ${params.pageData.analysis.title}`);

        const response = await axios.post(
          'https://openrouter.ai/api/v1/chat/completions',
          requestPayload,
          {
            headers: {
              'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
              'Content-Type': 'application/json',
              'HTTP-Referer': params.pageData.analysis.url,
              'X-Title': 'Bloop.ai Contextual Chat'
            },
            timeout: 30000
          }
        );

        const aiResponse = response.data.choices?.[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.';
        
        console.log('‚úÖ Contextual chat response with vision generated');
        return aiResponse;
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const requestPayload = {
          model: "qwen/qwen2.5-vl-32b-instruct:free",
          messages: [
            {
              role: "system",
              content: systemPrompt
            },
            {
              role: "user",
              content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "${params.pageData.analysis.title}" (${params.pageData.analysis.url}) –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: ${params.message}`
            }
          ],
          max_tokens: 800,
          temperature: 0.8
        };

        console.log(`üí≠ Processing contextual chat without vision for page: ${params.pageData.analysis.title}`);

        const response = await axios.post(
          'https://openrouter.ai/api/v1/chat/completions',
          requestPayload,
          {
            headers: {
              'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
              'Content-Type': 'application/json',
              'HTTP-Referer': params.pageData.analysis.url,
              'X-Title': 'Bloop.ai Contextual Chat'
            },
            timeout: 30000
          }
        );

        const aiResponse = response.data.choices?.[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.';
        
        console.log('‚úÖ Contextual chat response without vision generated');
        return aiResponse;
      }

    } catch (error) {
      console.error('‚ùå Contextual chat error:', error);
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }
  }
}; 