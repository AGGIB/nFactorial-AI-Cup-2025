import puppeteer from 'puppeteer';
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';

export interface ScreenshotOptions {
  width?: number;
  height?: number;
  fullPage?: boolean;
  waitForTimeout?: number;
  quality?: number;
}

export interface PageAnalysisData {
  url: string;
  title: string;
  metaDescription?: string;
  headings: string[];
  links: Array<{ text: string; href: string }>;
  buttons: string[];
  forms: Array<{ action: string; inputs: string[] }>;
  images: Array<{ alt: string; src: string }>;
  text: string;
}

class ScreenshotService {
  private uploadsDir = join(process.cwd(), 'uploads', 'screenshots');

  constructor() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!existsSync(this.uploadsDir)) {
      mkdirSync(this.uploadsDir, { recursive: true });
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
  private isValidUrl(url: string): { valid: boolean; error?: string } {
    try {
      const urlObj = new URL(url);
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API endpoints
      if (urlObj.hostname === 'localhost' && urlObj.pathname.includes('/api/')) {
        return { valid: false, error: 'Cannot analyze internal API endpoints' };
      }
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      if (urlObj.hostname === 'localhost' || urlObj.hostname === '127.0.0.1') {
        console.warn(`‚ö†Ô∏è Analyzing localhost URL: ${url}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
      if (!['http:', 'https:'].includes(urlObj.protocol)) {
        return { valid: false, error: 'Only HTTP and HTTPS protocols are supported' };
      }
      
      return { valid: true };
    } catch (error) {
      return { valid: false, error: 'Invalid URL format' };
    }
  }

  async captureScreenshot(
    url: string, 
    options: ScreenshotOptions = {}
  ): Promise<{ screenshotPath: string; screenshotBase64: string; analysisData: PageAnalysisData }> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    const validation = this.isValidUrl(url);
    if (!validation.valid) {
      throw new Error(`Invalid URL: ${validation.error}`);
    }

    const {
      width = 1200,
      height = 800,
      fullPage = true,
      waitForTimeout = 3000,
      quality = 80
    } = options;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è localhost
    const isLocalhost = url.includes('localhost') || url.includes('127.0.0.1');
    const adjustedTimeout = isLocalhost ? 10000 : waitForTimeout;

    console.log(`üì∏ Starting screenshot capture for: ${url}`);

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è macOS
    const browserArgs = [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      '--single-process',
      '--disable-gpu',
      '--disable-web-security',
      '--disable-features=VizDisplayCompositor',
      '--disable-extensions',
      '--disable-plugins',
      '--disable-background-timer-throttling',
      '--disable-backgrounding-occluded-windows',
      '--disable-renderer-backgrounding',
      '--disable-field-trial-config',
      '--disable-back-forward-cache',
      '--disable-ipc-flooding-protection',
      '--no-default-browser-check',
      '--no-pings',
      '--password-store=basic',
      '--use-mock-keychain',
      '--disable-component-extensions-with-background-pages',
      '--disable-component-update',
      '--disable-default-apps'
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è localhost
    if (isLocalhost) {
      browserArgs.push(
        '--disable-features=TranslateUI',
        '--disable-translate',
        '--disable-ipc-flooding-protection',
        '--remote-debugging-port=0' // –ü–æ–∑–≤–æ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ—Ä—Ç
      );
    }

    let browser;
    let attempt = 0;
    const maxAttempts = 3;

    while (attempt < maxAttempts) {
      try {
        attempt++;
        console.log(`üîÑ Attempt ${attempt}/${maxAttempts} to launch browser...`);

        browser = await puppeteer.launch({
          headless: "new",
          args: browserArgs,
          executablePath: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Chrome –Ω–∞ macOS
          timeout: 60000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞
          protocolTimeout: 60000,
          handleSIGINT: false,
          handleSIGTERM: false,
          handleSIGHUP: false,
          ignoreDefaultArgs: ['--disable-extensions'], // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
          defaultViewport: null // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        });
        
        break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä
      } catch (error) {
        console.error(`‚ùå Browser launch attempt ${attempt} failed:`, error);
        if (attempt >= maxAttempts) {
          // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å Chrome –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º –±–µ–∑ executablePath
          try {
            console.log('üîÑ Trying fallback browser launch without explicit executable path...');
            browser = await puppeteer.launch({
              headless: "new",
              args: browserArgs.filter(arg => !arg.includes('remote-debugging-port')), // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
              timeout: 30000,
              handleSIGINT: false,
              handleSIGTERM: false,
              handleSIGHUP: false
            });
            break;
          } catch (fallbackError) {
            console.error('‚ùå Fallback browser launch also failed:', fallbackError);
            throw new Error(`Failed to launch browser after ${maxAttempts} attempts: ${error}`);
          }
        }
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }

    let page;
    try {
      page = await browser.newPage();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
      await page.setViewport({ width, height });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è localhost
      const navigationTimeout = isLocalhost ? 60000 : 30000;
      page.setDefaultNavigationTimeout(navigationTimeout);
      page.setDefaultTimeout(navigationTimeout);
      
      console.log(`üåê Navigating to: ${url} (timeout: ${navigationTimeout}ms)`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
      let navigationAttempt = 0;
      const maxNavAttempts = 2;
      
      while (navigationAttempt < maxNavAttempts) {
        try {
          navigationAttempt++;
          await page.goto(url, { 
            waitUntil: isLocalhost ? 'domcontentloaded' : 'networkidle0',
            timeout: navigationTimeout 
          });
          break;
        } catch (error) {
          console.error(`‚ùå Navigation attempt ${navigationAttempt} failed:`, error);
          if (navigationAttempt >= maxNavAttempts) {
            throw error;
          }
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
      
      console.log(`‚è±Ô∏è Waiting ${adjustedTimeout}ms for page to settle...`);
      await page.waitForTimeout(adjustedTimeout);

      console.log(`üìä Extracting page data...`);
      const analysisData = await this.extractPageData(page, url);

      console.log(`üì∑ Taking screenshot...`);
      const timestamp = Date.now();
      const filename = `screenshot_${timestamp}.jpg`;
      const screenshotPath = join(this.uploadsDir, filename);

      const screenshotBuffer = await page.screenshot({
        path: screenshotPath,
        type: 'jpeg',
        quality,
        fullPage,
        timeout: 30000
      });

      const screenshotBase64 = screenshotBuffer.toString('base64');

      console.log(`‚úÖ Screenshot captured successfully: ${filename}`);

      return {
        screenshotPath,
        screenshotBase64,
        analysisData
      };
    } catch (error) {
      console.error(`‚ùå Error during screenshot capture:`, error);
      throw error;
    } finally {
      if (page) {
        try {
          await page.close();
        } catch (e) {
          console.warn('Warning: Failed to close page:', e);
        }
      }
      if (browser) {
        try {
          await browser.close();
        } catch (e) {
          console.warn('Warning: Failed to close browser:', e);
        }
      }
    }
  }

  private async extractPageData(page: any, url: string): Promise<PageAnalysisData> {
    return await page.evaluate((currentUrl: string) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const title = document.title || '';
      
      // –ú–µ—Ç–∞–æ–ø–∏—Å–∞–Ω–∏–µ
      const metaDescription = document.querySelector('meta[name="description"]')?.getAttribute('content') || '';
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (h1-h6)
      const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'))
        .map(h => h.textContent?.trim() || '')
        .filter(text => text.length > 0);
      
      // –°—Å—ã–ª–∫–∏
      const links = Array.from(document.querySelectorAll('a[href]'))
        .map(link => ({
          text: link.textContent?.trim() || '',
          href: link.getAttribute('href') || ''
        }))
        .filter(link => link.text.length > 0);
      
      // –ö–Ω–æ–ø–∫–∏
      const buttons = Array.from(document.querySelectorAll('button, input[type="button"], input[type="submit"], .btn, [role="button"]'))
        .map(btn => btn.textContent?.trim() || btn.getAttribute('value') || btn.getAttribute('aria-label') || '')
        .filter(text => text.length > 0);
      
      // –§–æ—Ä–º—ã
      const forms = Array.from(document.querySelectorAll('form')).map(form => ({
        action: form.getAttribute('action') || '',
        inputs: Array.from(form.querySelectorAll('input, textarea, select'))
          .map(input => input.getAttribute('placeholder') || input.getAttribute('name') || input.getAttribute('type') || '')
          .filter(text => text.length > 0)
      }));
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const images = Array.from(document.querySelectorAll('img'))
        .map(img => ({
          alt: img.getAttribute('alt') || '',
          src: img.getAttribute('src') || ''
        }))
        .filter(img => img.alt.length > 0 || img.src.length > 0);
      
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const textElements = Array.from(document.querySelectorAll('p, span, div, li'))
        .map(el => el.textContent?.trim() || '')
        .filter(text => text.length > 10); // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–π —Ç–µ–∫—Å—Ç
      
      const text = textElements.slice(0, 50).join(' ').substring(0, 2000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—ä–µ–º

      return {
        url: currentUrl,
        title,
        metaDescription,
        headings,
        links,
        buttons,
        forms,
        images,
        text
      };
    }, url);
  }

  async analyzeCurrentPage(url: string): Promise<{
    screenshot: string;
    analysis: PageAnalysisData;
    visualDescription: string;
  }> {
    try {
      console.log(`üîç Starting page analysis for: ${url}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
      const validation = this.isValidUrl(url);
      if (!validation.valid) {
        throw new Error(`Cannot analyze URL: ${validation.error}`);
      }
      
      // –î–ª—è localhost:3000 —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
      const urlObj = new URL(url);
      if (urlObj.hostname === 'localhost' && urlObj.port === '3000') {
        try {
          const quickAnalysis = await this.quickAnalyzeLocalhost(url);
          if (quickAnalysis) {
            console.log(`‚úÖ Quick analysis completed for: ${url}`);
            return quickAnalysis;
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Quick analysis failed, trying full Puppeteer analysis...');
        }
      }
      
      const { screenshotBase64, analysisData } = await this.captureScreenshot(url);
      
      // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è AI
      const visualDescription = this.createPageDescription(analysisData);
      
      console.log(`‚úÖ Page analysis completed for: ${url}`);
      
      return {
        screenshot: screenshotBase64,
        analysis: analysisData,
        visualDescription
      };
    } catch (error) {
      console.error(`‚ùå Error analyzing page ${url}:`, error);
      
      // –°–æ–∑–¥–∞–µ–º "—É–º–Ω—ã–µ" fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      const fallbackData = this.createSmartFallbackData(url);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      console.log(`üîÑ Returning fallback data for: ${url}`);
      return {
        screenshot: '', // –ü—É—Å—Ç–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        analysis: fallbackData,
        visualDescription: this.createPageDescription(fallbackData)
      };
    }
  }

  // –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ localhost –±–µ–∑ Puppeteer
  private async quickAnalyzeLocalhost(url: string): Promise<{
    screenshot: string;
    analysis: PageAnalysisData;
    visualDescription: string;
  } | null> {
    try {
      console.log('üöÄ Attempting quick localhost analysis...');
      
      // –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML
      const axios = require('axios');
      const response = await axios.get(url, {
        timeout: 5000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        }
      });
      
      const html = response.data;
      
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –±–µ–∑ DOM
      const titleMatch = html.match(/<title[^>]*>([^<]*)<\/title>/i);
      const title = titleMatch ? titleMatch[1] : 'Bloop.ai - AI Platform';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ content
      let pageType = 'unknown';
      if (html.includes('Dashboard') || html.includes('dashboard')) {
        pageType = 'dashboard';
      } else if (html.includes('Onboarding') || html.includes('onboarding')) {
        pageType = 'onboarding';
      } else if (html.includes('Landing') || html.includes('landing')) {
        pageType = 'landing';
      }
      
      const analysisData: PageAnalysisData = {
        url: url,
        title: title,
        metaDescription: 'AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
        headings: pageType === 'dashboard' 
          ? ['Dashboard', '–í–∞—à–∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã', '–°–æ–∑–¥–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞']
          : ['Bloop.ai', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'],
        links: [
          { text: 'Dashboard', href: '/dashboard' },
          { text: '–°–æ–∑–¥–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞', href: '/onboarding' }
        ],
        buttons: pageType === 'dashboard' 
          ? ['–°–æ–∑–¥–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞', '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–∏–¥–∂–µ—Ç–∞', '–í—ã–π—Ç–∏']
          : ['–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', '–í–æ–π—Ç–∏'],
        forms: [],
        images: [],
        text: pageType === 'dashboard' 
          ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dashboard Bloop.ai. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏, —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–∞—à —Å–∞–π—Ç.'
          : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bloop.ai - –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø–æ–≤.'
      };
      
      console.log(`‚úÖ Quick analysis successful for ${pageType} page`);
      
      return {
        screenshot: '', // –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ
        analysis: analysisData,
        visualDescription: this.createPageDescription(analysisData)
      };
    } catch (error) {
      console.error('‚ùå Quick localhost analysis failed:', error);
      return null;
    }
  }

  private createPageDescription(data: PageAnalysisData): string {
    let description = `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${data.title}\n`;
    description += `URL: ${data.url}\n`;
    
    if (data.metaDescription) {
      description += `–û–ø–∏—Å–∞–Ω–∏–µ: ${data.metaDescription}\n`;
    }
    
    if (data.headings.length > 0) {
      description += `–ó–∞–≥–æ–ª–æ–≤–∫–∏: ${data.headings.join(', ')}\n`;
    }
    
    if (data.buttons.length > 0) {
      description += `–ö–Ω–æ–ø–∫–∏: ${data.buttons.join(', ')}\n`;
    }
    
    if (data.links.length > 0) {
      const linkTexts = data.links.slice(0, 10).map(l => l.text).join(', ');
      description += `–°—Å—ã–ª–∫–∏: ${linkTexts}\n`;
    }
    
    if (data.forms.length > 0) {
      description += `–§–æ—Ä–º—ã: ${data.forms.length} —Ñ–æ—Ä–º(—ã)\n`;
    }
    
    description += `–¢–µ–∫—Å—Ç: ${data.text.substring(0, 500)}...`;
    
    return description;
  }

  // –°–æ–∑–¥–∞–µ–º "—É–º–Ω—ã–µ" fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  private createSmartFallbackData(url: string): PageAnalysisData {
    const urlObj = new URL(url);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è localhost:3000 (React frontend)
    if (urlObj.hostname === 'localhost' && urlObj.port === '3000') {
      return {
        url: url,
        title: 'Bloop.ai - AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
        metaDescription: '–°–æ–∑–¥–∞–π—Ç–µ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ IT-—Å—Ç–∞—Ä—Ç–∞–ø–∞ –∑–∞ 5 –º–∏–Ω—É—Ç',
        headings: ['Bloop.ai', 'Dashboard', '–°–æ–∑–¥–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞', '–í–∞—à–∏ –∞–≥–µ–Ω—Ç—ã'],
        links: [
          { text: '–°–æ–∑–¥–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞', href: '/onboarding' },
          { text: 'Dashboard', href: '/dashboard' },
          { text: '–¢–µ—Å—Ç Vision AI', href: '/visual-test' }
        ],
        buttons: ['–°–æ–∑–¥–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞', '–í—ã–π—Ç–∏', '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–∏–¥–∂–µ—Ç–∞'],
        forms: [],
        images: [],
        text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bloop.ai - –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø–æ–≤. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ AI-–∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.'
      };
    }
    
    // –û–±—â–∏–π fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö localhost —Å—Ç—Ä–∞–Ω–∏—Ü
    if (urlObj.hostname === 'localhost') {
      return {
        url: url,
        title: '–õ–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        metaDescription: '',
        headings: [],
        links: [],
        buttons: [],
        forms: [],
        images: [],
        text: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.'
      };
    }
    
    // –û–±—â–∏–π fallback
    return {
      url: url,
      title: '–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      metaDescription: '',
      headings: [],
      links: [],
      buttons: [],
      forms: [],
      images: [],
      text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –Ø –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.'
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
  async cleanupOldScreenshots(maxAgeHours: number = 24): Promise<void> {
    const fs = require('fs').promises;
    const files = await fs.readdir(this.uploadsDir);
    const now = Date.now();
    
    for (const file of files) {
      if (file.startsWith('screenshot_')) {
        const filePath = join(this.uploadsDir, file);
        const stats = await fs.stat(filePath);
        const ageHours = (now - stats.mtime.getTime()) / (1000 * 60 * 60);
        
        if (ageHours > maxAgeHours) {
          await fs.unlink(filePath);
          console.log(`Deleted old screenshot: ${file}`);
        }
      }
    }
  }

  // ===== BROWSER AUTOMATION METHODS =====

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
  async clickElement(url: string, selector: string, options?: {
    timeout?: number;
    waitForNavigation?: boolean;
  }): Promise<{ success: boolean; message: string; newUrl?: string }> {
    const { timeout = 30000, waitForNavigation = false } = options || {};
    
    console.log(`üñ±Ô∏è Attempting to click element: ${selector} on ${url}`);
    
    const browser = await this.launchBrowser();
    let page;
    
    try {
      page = await browser.newPage();
      await this.setupPage(page, url);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.goto(url, { waitUntil: 'domcontentloaded', timeout });
      await page.waitForTimeout(2000);
      
      let element = null;
      
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
      try {
        await page.waitForSelector(selector, { timeout: 5000 });
        element = await page.$(selector);
        console.log(`‚úÖ Found element with CSS selector: ${selector}`);
      } catch (cssError) {
        console.log(`‚ö†Ô∏è CSS selector failed, trying XPath approach for: ${selector}`);
        
        // –ï—Å–ª–∏ CSS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–Ω–æ–≤–æ –ø–æ —Ç–µ–∫—Å—Ç—É
        const buttonText = selector; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        const foundElement = await page.evaluate((searchText) => {
          const allElements = Array.from(document.querySelectorAll('button, input[type="button"], input[type="submit"], a, [role="button"], .btn'));
          
          for (const el of allElements) {
            const text = el.textContent?.toLowerCase().trim() || '';
            const value = (el as HTMLInputElement).value?.toLowerCase().trim() || '';
            
            if (text.includes(searchText.toLowerCase()) || value.includes(searchText.toLowerCase())) {
              // Scroll element into view
              el.scrollIntoView({ behavior: 'smooth', block: 'center' });
              
              // Add a unique attribute for easy selection
              const uniqueId = 'auto-click-' + Date.now();
              el.setAttribute('data-auto-click', uniqueId);
              return uniqueId;
            }
          }
          return null;
        }, selector);
        
        if (foundElement) {
          element = await page.$(`[data-auto-click="${foundElement}"]`);
          console.log(`‚úÖ Found element by text search: ${selector}`);
        }
      }
      
      if (!element) {
        return {
          success: false,
          message: `–≠–ª–µ–º–µ–Ω—Ç "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`
        };
      }
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
      await page.evaluate(el => {
        el.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, element);
      
      await page.waitForTimeout(1000);
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
      if (waitForNavigation) {
        try {
          await Promise.all([
            page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout }),
            element.click()
          ]);
        } catch (navError) {
          // –ï—Å–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞–µ–º
          console.log(`‚ö†Ô∏è Navigation timeout, clicking anyway...`);
          await element.click();
          await page.waitForTimeout(2000);
        }
      } else {
        await element.click();
        await page.waitForTimeout(1000);
      }
      
      const newUrl = page.url();
      
      console.log(`‚úÖ Successfully clicked element, current URL: ${newUrl}`);
      
      return {
        success: true,
        message: `–≠–ª–µ–º–µ–Ω—Ç "${selector}" —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç`,
        newUrl
      };
      
    } catch (error) {
      console.error(`‚ùå Error clicking element:`, error);
      return {
        success: false,
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç "${selector}": ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    } finally {
      if (page) await page.close();
      await browser.close();
    }
  }

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
  async fillForm(url: string, formData: Record<string, string>, submitSelector?: string): Promise<{ 
    success: boolean; 
    message: string; 
    newUrl?: string 
  }> {
    console.log(`üìù Attempting to fill form on ${url}`);
    
    const browser = await this.launchBrowser();
    let page;
    
    try {
      page = await browser.newPage();
      await this.setupPage(page, url);
      
      await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });
      await page.waitForTimeout(2000);
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
      for (const [selector, value] of Object.entries(formData)) {
        try {
          await page.waitForSelector(selector, { timeout: 5000 });
          await page.click(selector); // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ
          await page.keyboard.down('Control');
          await page.keyboard.press('KeyA'); // –í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
          await page.keyboard.up('Control');
          await page.type(selector, value);
          console.log(`‚úÖ Filled field ${selector} with value`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Could not fill field ${selector}:`, error);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä
      if (submitSelector) {
        try {
          await Promise.all([
            page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 30000 }),
            page.click(submitSelector)
          ]);
        } catch (error) {
          // –ï—Å–ª–∏ navigation –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞–µ–º
          await page.click(submitSelector);
          await page.waitForTimeout(2000);
        }
      }
      
      const newUrl = page.url();
      
      console.log(`‚úÖ Form filled successfully, current URL: ${newUrl}`);
      
      return {
        success: true,
        message: `–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞${submitSelector ? ' –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' : ''}`,
        newUrl
      };
      
    } catch (error) {
      console.error(`‚ùå Error filling form:`, error);
      return {
        success: false,
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    } finally {
      if (page) await page.close();
      await browser.close();
    }
  }

  // –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
  async findButtonByText(url: string, buttonText: string): Promise<{
    success: boolean;
    selector?: string;
    message: string;
  }> {
    console.log(`üîç Searching for button with text: "${buttonText}" on ${url}`);
    
    const browser = await this.launchBrowser();
    let page;
    
    try {
      page = await browser.newPage();
      await this.setupPage(page, url);
      
      await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });
      await page.waitForTimeout(2000);
      
      const textLower = buttonText.toLowerCase();
      
      // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ evaluate
      const elementInfo = await page.evaluate((searchText) => {
        const allElements = Array.from(document.querySelectorAll('button, input[type="button"], input[type="submit"], a, [role="button"], .btn'));
        
        for (let i = 0; i < allElements.length; i++) {
          const element = allElements[i];
          const text = element.textContent?.toLowerCase().trim() || '';
          const value = (element as HTMLInputElement).value?.toLowerCase().trim() || '';
          const ariaLabel = element.getAttribute('aria-label')?.toLowerCase().trim() || '';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
          if (text.includes(searchText.toLowerCase()) || 
              value.includes(searchText.toLowerCase()) || 
              ariaLabel.includes(searchText.toLowerCase())) {
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            let selector = element.tagName.toLowerCase();
            
            // –î–æ–±–∞–≤–ª—è–µ–º ID –µ—Å–ª–∏ –µ—Å—Ç—å
            if (element.id) {
              selector = `#${element.id}`;
            }
            // –ò–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            else if (element.className && typeof element.className === 'string') {
              const firstClass = element.className.split(' ').filter(c => c.trim())[0];
              if (firstClass) {
                selector = `${selector}.${firstClass}`;
              }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            const sameElements = document.querySelectorAll(selector);
            if (sameElements.length > 1) {
              const index = Array.from(sameElements).indexOf(element);
              selector = `${selector}:nth-of-type(${index + 1})`;
            }
            
            return {
              found: true,
              selector: selector,
              text: text || value || ariaLabel,
              tagName: element.tagName,
              index: i
            };
          }
        }
        
        return { found: false };
      }, buttonText);
      
      if (elementInfo.found) {
        console.log(`‚úÖ Found button: "${elementInfo.text}" with selector: ${elementInfo.selector}`);
        return {
          success: true,
          selector: elementInfo.selector,
          message: `–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–∞–π–¥–µ–Ω–∞`
        };
      }
      
      // –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º XPath
      console.log(`‚ö†Ô∏è Simple search failed, trying XPath for: "${buttonText}"`);
      
      const xpathSelector = await this.findElementByXPath(page, buttonText);
      if (xpathSelector) {
        return {
          success: true,
          selector: xpathSelector,
          message: `–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ XPath`
        };
      }
      
      return {
        success: false,
        message: `–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`
      };
      
    } catch (error) {
      console.error(`‚ùå Error finding button:`, error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    } finally {
      if (page) await page.close();
      await browser.close();
    }
  }

  // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ XPath
  private async findElementByXPath(page: any, buttonText: string): Promise<string | null> {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ XPath –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
      const xpathExpressions = [
        `//button[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø', 'abcdefghijklmnopqrstuvwxyz–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'), '${buttonText.toLowerCase()}')]`,
        `//input[@type='button' or @type='submit'][contains(translate(@value, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø', 'abcdefghijklmnopqrstuvwxyz–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'), '${buttonText.toLowerCase()}')]`,
        `//a[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø', 'abcdefghijklmnopqrstuvwxyz–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'), '${buttonText.toLowerCase()}')]`,
        `//*[@role='button'][contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø', 'abcdefghijklmnopqrstuvwxyz–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'), '${buttonText.toLowerCase()}')]`,
        `//*[contains(@class, 'btn')][contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø', 'abcdefghijklmnopqrstuvwxyz–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'), '${buttonText.toLowerCase()}')]`
      ];
      
      for (const xpath of xpathExpressions) {
        try {
          const elements = await page.$x(xpath);
          if (elements.length > 0) {
            console.log(`‚úÖ Found element with XPath: ${xpath}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
            const elementInfo = await page.evaluate((el: Element) => {
              const tagName = el.tagName.toLowerCase();
              const id = el.id;
              const classes = el.className;
              
              if (id) {
                return `#${id}`;
              } else if (classes && typeof classes === 'string') {
                const firstClass = classes.split(' ').filter(c => c.trim())[0];
                return firstClass ? `${tagName}.${firstClass}` : tagName;
              }
              return tagName;
            }, elements[0]);
            
            return elementInfo;
          }
        } catch (xpathError) {
          console.warn(`XPath expression failed: ${xpath}`, xpathError);
        }
      }
      
      return null;
    } catch (error) {
      console.error('XPath search failed:', error);
      return null;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async launchBrowser() {
    const browserArgs = [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-web-security',
      '--disable-features=VizDisplayCompositor'
    ];

    try {
      return await puppeteer.launch({
        headless: "new",
        args: browserArgs,
        executablePath: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',
        timeout: 60000
      });
    } catch (error) {
      // Fallback –±–µ–∑ executablePath
      return await puppeteer.launch({
        headless: "new",
        args: browserArgs,
        timeout: 30000
      });
    }
  }

  private async setupPage(page: any, url: string) {
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    await page.setViewport({ width: 1200, height: 800 });
    
    const isLocalhost = url.includes('localhost');
    const timeout = isLocalhost ? 60000 : 30000;
    page.setDefaultNavigationTimeout(timeout);
    page.setDefaultTimeout(timeout);
  }
}

export const screenshotService = new ScreenshotService(); 