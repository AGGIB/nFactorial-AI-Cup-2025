import { generateSystemPrompt } from './promptService';

export interface SiteAnalysisResult {
  url: string;
  title: string;
  description: string;
  navigation: string[];
  keyPages: { url: string; title: string; content: string }[];
  technologies: string[];
  contactInfo?: {
    email?: string;
    phone?: string;
    address?: string;
  };
  businessType: string;
  targetAudience: string;
  mainFeatures: string[];
  faq?: { question: string; answer: string }[];
}

export interface AnalysisContext {
  siteAnalysis: SiteAnalysisResult;
  userInputs: {
    name: string;
    description: string;
    knowledgeBase?: string;
    settings?: any;
  };
  generatedPrompt: string;
  widgetConfig: {
    theme: string;
    position: string;
    greeting: string;
    placeholder: string;
  };
}

export const analyzeSite = async (url: string): Promise<SiteAnalysisResult> => {
  try {
    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞: ${url}`);
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const mockAnalysis: SiteAnalysisResult = {
      url,
      title: "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç–∞",
      description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞",
      navigation: ["–ì–ª–∞–≤–Ω–∞—è", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–†–µ—à–µ–Ω–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
      keyPages: [
        {
          url: `${url}/features`,
          title: "–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞",
          content: "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
        },
        {
          url: `${url}/support`,
          title: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
          content: "FAQ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
        }
      ],
      technologies: ["React", "Node.js", "API"],
      contactInfo: {
        email: "support@example.com"
      },
      businessType: "SaaS –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
      targetAudience: "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ IT –∫–æ–º–∞–Ω–¥—ã",
      mainFeatures: [
        "API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
        "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –¥–∞—à–±–æ—Ä–¥—ã"
      ]
    };

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: ${url}`);
    return mockAnalysis;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞ ${url}:`, error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç');
  }
};

export const generateWidgetContext = async (
  siteAnalysis: SiteAnalysisResult,
  userInputs: any
): Promise<AnalysisContext> => {
  console.log('üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞...');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
  const generatedPrompt = generateSystemPrompt({
    name: userInputs.name,
    description: userInputs.description,
    siteAnalysis,
    knowledgeBase: userInputs.knowledgeBase,
    settings: userInputs.settings
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –ø–æ–¥ —Å–∞–π—Ç
  const widgetConfig = {
    theme: detectTheme(siteAnalysis),
    position: "bottom-right",
    greeting: `–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å ${userInputs.name}. –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!`,
    placeholder: "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
  };

  const context: AnalysisContext = {
    siteAnalysis,
    userInputs,
    generatedPrompt,
    widgetConfig
  };

  console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–¥–∂–µ—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  return context;
};

const detectTheme = (analysis: SiteAnalysisResult): string => {
  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
  if (analysis.technologies.includes('React')) {
    return 'modern';
  }
  return 'default';
};

export const saveAnalysisResults = async (
  agentId: string,
  context: AnalysisContext
): Promise<void> => {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ${agentId}`);
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
  
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
}; 