import express from 'express';
import { screenshotService } from '../services/screenshotService';
import { aiService } from '../services/aiService';

const router = express.Router();

// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/page', async (req, res) => {
  try {
    const { url, agentId } = req.body;

    if (!url) {
      return res.status(400).json({ error: 'URL is required' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    try {
      new URL(url);
    } catch {
      return res.status(400).json({ error: 'Invalid URL format' });
    }

    console.log(`üîç Analyzing page: ${url} for agent: ${agentId}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageData = await screenshotService.analyzeCurrentPage(url);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
    const aiAnalysis = await aiService.analyzePageWithVision({
      screenshot: pageData.screenshot,
      pageData: pageData.analysis,
      agentId: agentId || 'default'
    });

    res.json({
      success: true,
      analysis: {
        visual: aiAnalysis,
        data: pageData.analysis,
        description: pageData.visualDescription
      }
    });

  } catch (error) {
    console.error('Error analyzing page:', error);
    res.status(500).json({ 
      error: 'Failed to analyze page',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
router.post('/screenshot', async (req, res) => {
  try {
    const { url } = req.body;

    if (!url) {
      return res.status(400).json({ error: 'URL is required' });
    }

    console.log(`üì∏ Taking screenshot: ${url}`);

    const { screenshotBase64 } = await screenshotService.captureScreenshot(url);

    res.json({
      success: true,
      screenshot: screenshotBase64
    });

  } catch (error) {
    console.error('Error taking screenshot:', error);
    res.status(500).json({ 
      error: 'Failed to take screenshot',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —á–∞—Ç–∞
router.post('/context', async (req, res) => {
  try {
    const { url, question, agentId, sessionId } = req.body;

    if (!url || !question) {
      return res.status(400).json({ error: 'URL and question are required' });
    }

    console.log(`üí≠ Contextual analysis for: ${url}`);
    console.log(`Question: ${question}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageData = await screenshotService.analyzeCurrentPage(url);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞
    const response = await aiService.chatWithPageContext({
      message: question,
      pageData,
      agentId: agentId || 'default',
      sessionId: sessionId || `session_${Date.now()}`
    });

    res.json({
      success: true,
      response,
      pageContext: {
        title: pageData.analysis.title,
        url: pageData.analysis.url,
        hasButtons: pageData.analysis.buttons.length > 0,
        hasForms: pageData.analysis.forms.length > 0
      }
    });

  } catch (error) {
    console.error('Error in contextual analysis:', error);
    res.status(500).json({ 
      error: 'Failed to analyze with context',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
router.post('/automate', async (req, res) => {
  try {
    const { action, url, params } = req.body;

    if (!action || !url) {
      return res.status(400).json({ error: 'Action and URL are required' });
    }

    console.log(`ü§ñ Browser automation: ${action} on ${url}`);

    let result;

    switch (action) {
      case 'click':
        if (!params.buttonText) {
          return res.status(400).json({ error: 'buttonText is required for click action' });
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
        const findResult = await screenshotService.findButtonByText(url, params.buttonText);
        if (!findResult.success) {
          return res.json({
            success: false,
            message: findResult.message
          });
        }
        
        // –ö–ª–∏–∫–∞–µ–º
        result = await screenshotService.clickElement(url, findResult.selector!, {
          waitForNavigation: params.waitForNavigation !== false
        });
        break;

      case 'fill_form':
        if (!params.formData) {
          return res.status(400).json({ error: 'formData is required for fill_form action' });
        }
        
        result = await screenshotService.fillForm(url, params.formData, params.submitSelector);
        break;

      case 'find_button':
        if (!params.buttonText) {
          return res.status(400).json({ error: 'buttonText is required for find_button action' });
        }
        
        result = await screenshotService.findButtonByText(url, params.buttonText);
        break;

      default:
        return res.status(400).json({ error: `Unknown action: ${action}` });
    }

    res.json({
      success: result.success,
      message: result.message,
      data: result
    });

  } catch (error) {
    console.error('Error in browser automation:', error);
    res.status(500).json({ 
      error: 'Failed to execute automation',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

export default router; 