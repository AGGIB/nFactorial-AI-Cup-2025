import { Router, Request, Response, NextFunction } from 'express';
import { prisma } from '../index';
import { createError } from '../middleware/errorHandler';
import { authenticate, AuthRequest } from '../middleware/auth';
import { generateWidgetCode } from '../services/widgetService';
import { analyzeSite, generateWidgetContext, saveAnalysisResults } from '../services/analysisService';
import { z } from 'zod';

const router = Router();

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
const onboardingSchema = z.object({
  name: z.string().min(1, '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  description: z.string().min(1, '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  websiteUrl: z.string().url('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Å–∞–π—Ç–∞').optional(),
  knowledgeBase: z.string().optional(),
  settings: z.object({
    companyName: z.string().optional(),
    targetAudience: z.string().optional(),
    documentationUrl: z.string().url('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏').optional().or(z.literal('')),
    supportEmail: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').optional().or(z.literal('')),
  }).optional()
});

// POST /api/onboarding - –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
router.post('/', authenticate, async (req: AuthRequest, res: Response, next: NextFunction) => {
  try {
    const validatedData = onboardingSchema.parse(req.body);

    console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user!.id}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤–∏–¥–∂–µ—Ç–∞
    const widgetCode = generateWidgetCode();

    let analysisContext = null;
    let enhancedPrompt = '';

    // –ï—Å–ª–∏ –µ—Å—Ç—å URL —Å–∞–π—Ç–∞, –ø—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
    if (validatedData.websiteUrl) {
      console.log(`üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞: ${validatedData.websiteUrl}`);
      
      try {
        const siteAnalysis = await analyzeSite(validatedData.websiteUrl);
        analysisContext = await generateWidgetContext(siteAnalysis, validatedData);
        enhancedPrompt = analysisContext.generatedPrompt;
        
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (analysisError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:', analysisError);
        enhancedPrompt = generateBasicPrompt(validatedData);
      }
    } else {
      enhancedPrompt = generateBasicPrompt(validatedData);
    }

    // –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    const agent = await prisma.agent.create({
      data: {
        userId: req.user!.id,
        name: validatedData.name,
        description: validatedData.description,
        websiteUrl: validatedData.websiteUrl,
        knowledgeBase: validatedData.knowledgeBase,
        settings: validatedData.settings ? JSON.stringify(validatedData.settings) : null,
        widgetCode,
        isActive: true,
        systemPrompt: enhancedPrompt
      },
      include: {
        user: {
          select: {
            id: true,
            email: true,
            name: true
          }
        }
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (analysisContext) {
      await saveAnalysisResults(agent.id, analysisContext);
    }

    console.log(`‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${agent.id}`);

    res.status(201).json({
      success: true,
      message: '–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      data: { 
        agent,
        analysisPerformed: !!analysisContext,
        widgetConfig: analysisContext?.widgetConfig
      }
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      const firstError = error.errors[0];
      return next(createError(firstError.message, 400));
    }
    next(error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞
function generateBasicPrompt(data: z.infer<typeof onboardingSchema>): string {
  const companyName = data.settings?.companyName || '–∫–æ–º–ø–∞–Ω–∏—è';
  const productName = data.name;
  const targetAudience = data.settings?.targetAudience || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';
  const supportEmail = data.settings?.supportEmail;

  let prompt = `–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ "${productName}" –æ—Ç ${companyName}.

–û–ü–ò–°–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê:
${data.description}

–¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø:
${targetAudience}

–¢–í–û–Ø –†–û–õ–¨:
- –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
- –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º

–ü–†–ê–í–ò–õ–ê:
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å ${productName}
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç, —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π—Å—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º`;

  if (data.knowledgeBase) {
    prompt += `\n\n–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô:
${data.knowledgeBase}`;
  }

  if (supportEmail) {
    prompt += `\n\n–î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ${supportEmail}`;
  }

  return prompt;
}

// GET /api/onboarding/validate-url - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
router.get('/validate-url', async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { url } = req.query;

    if (!url || typeof url !== 'string') {
      throw createError('URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 400);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
    try {
      const response = await fetch(url, { 
        method: 'HEAD',
        timeout: 5000 // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      const isValid = response.ok;
      
      res.json({
        success: true,
        data: {
          isValid,
          status: response.status,
          statusText: response.statusText
        }
      });
    } catch (fetchError) {
      res.json({
        success: true,
        data: {
          isValid: false,
          error: '–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
        }
      });
    }
  } catch (error) {
    next(error);
  }
});

export default router; 