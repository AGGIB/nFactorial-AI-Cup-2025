import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { Bot, Plus, BarChart3, Settings, ExternalLink, Copy, Trash2 } from 'lucide-react';
import { agentsAPI } from '../services/api';
import { Agent } from '../types';

const Dashboard: React.FC = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [agents, setAgents] = useState<Agent[]>([]);
  const [loading, setLoading] = useState(true);
  const [notification, setNotification] = useState<string | null>(null);
  const [notificationType, setNotificationType] = useState<'success' | 'error'>('success');

  useEffect(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    if (location.state?.message) {
      setNotification(location.state.message);
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö
      window.history.replaceState({}, document.title);
      
      // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => setNotification(null), 5000);
    }

    loadAgents();
  }, [location.state]);

  const loadAgents = async () => {
    try {
      setLoading(true);
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤...');
      const response = await agentsAPI.getAll();
      console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', response);
      
      if (response.success && response.data) {
        setAgents(response.data.agents);
        console.log('–ê–≥–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data.agents);
      } else {
        console.error('–û—à–∏–±–∫–∞ API:', response.error);
        const errorMessage = response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤';
        setNotification(errorMessage);
        setNotificationType('error');
        setTimeout(() => setNotification(null), 5000);
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≥–µ–Ω—Ç–æ–≤:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error.response?.status === 401) {
        setNotification('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
        setNotificationType('error');
        setTimeout(() => setNotification(null), 5000);
        // AuthContext –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç 401 –æ—à–∏–±–∫—É
      } else {
        const errorMessage = error.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
        setNotification(errorMessage);
        setNotificationType('error');
        setTimeout(() => setNotification(null), 5000);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCreateAgent = () => {
    navigate('/onboarding');
  };

  const handleAgentClick = (agentId: string) => {
    navigate(`/agent/${agentId}`);
  };

  const handleDeleteAgent = async (agentId: string, agentName: string) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ "${agentName}"?`)) {
      try {
        const response = await agentsAPI.delete(agentId);
        if (response.success) {
          setAgents(agents.filter(agent => agent.id !== agentId));
          setNotification(`–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç "${agentName}" —É–¥–∞–ª–µ–Ω`);
          setNotificationType('success');
          setTimeout(() => setNotification(null), 3000);
        }
      } catch (error) {
        console.error('Error deleting agent:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞');
      }
    }
  };

  const handleGetWidgetCode = async (agentId: string, agentName: string) => {
    try {
      const response = await agentsAPI.getWidgetCode(agentId);
      if (response.success && response.data) {
        // –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(response.data.script);
        setNotification(`–ö–æ–¥ –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è "${agentName}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`);
        setNotificationType('success');
        setTimeout(() => setNotification(null), 3000);
      }
    } catch (error) {
      console.error('Error getting widget code:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –≤–∏–¥–∂–µ—Ç–∞');
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Notification */}
      {notification && (
        <div className={`fixed top-4 right-4 bg-${notificationType === 'success' ? 'green' : 'red'}-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-slideDown`}>
          {notification}
        </div>
      )}

      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-2">
              <Bot className="h-8 w-8 text-primary-600" />
              <span className="text-2xl font-bold text-gray-900">Bloop.ai</span>
            </div>
            
            <div className="flex items-center space-x-4">
              <Link 
                to="/visual-test" 
                className="flex items-center gap-2 px-3 py-2 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors"
              >
                üîç –¢–µ—Å—Ç Vision AI
              </Link>
              <span className="text-sm text-gray-600">
                –ü—Ä–∏–≤–µ—Ç, {user?.name || user?.email}!
              </span>
              <button
                onClick={logout}
                className="text-sm text-gray-500 hover:text-gray-700"
              >
                –í—ã–π—Ç–∏
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Dashboard</h1>
            <p className="text-gray-600">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤–∞—à–µ–≥–æ IT-—Å—Ç–∞—Ä—Ç–∞–ø–∞</p>
          </div>
          
          <button 
            onClick={handleCreateAgent}
            className="btn-primary flex items-center gap-2"
          >
            <Plus className="h-5 w-5" />
            –°–æ–∑–¥–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          </button>
        </div>

        {loading ? (
          /* Loading State */
          <div className="text-center py-12">
            <Bot className="h-16 w-16 text-gray-400 mx-auto mb-4 animate-pulse" />
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤...</p>
          </div>
        ) : agents.length === 0 ? (
          /* Empty State */
          <div className="text-center py-12">
            <Bot className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
            </h3>
            <p className="text-gray-600 mb-6">
              –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ò–ò-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            </p>
            <button 
              onClick={handleCreateAgent}
              className="btn-primary flex items-center gap-2 mx-auto"
            >
              <Plus className="h-5 w-5" />
              –°–æ–∑–¥–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            </button>
          </div>
        ) : (
          /* Agents Grid */
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {agents.map((agent) => (
              <div 
                key={agent.id} 
                className="card hover:shadow-md transition-shadow duration-200 cursor-pointer"
                onClick={() => handleAgentClick(agent.id)}
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-primary-100 rounded-lg flex items-center justify-center">
                      <Bot className="h-5 w-5 text-primary-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-900">{agent.name}</h3>
                      <p className="text-sm text-gray-500">
                        –°–æ–∑–¥–∞–Ω {formatDate(agent.createdAt)}
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleGetWidgetCode(agent.id, agent.name);
                      }}
                      className="p-2 text-gray-400 hover:text-primary-600 transition-colors"
                      title="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–∏–¥–∂–µ—Ç–∞"
                    >
                      <Copy className="h-4 w-4" />
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleDeleteAgent(agent.id, agent.name);
                      }}
                      className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                      title="–£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                </div>

                <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                  {agent.description}
                </p>

                <div className="flex items-center justify-between text-sm">
                  <div className="flex items-center gap-2 text-gray-500">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    –ê–∫—Ç–∏–≤–µ–Ω
                  </div>
                  
                  {agent.websiteUrl && (
                    <a
                      href={agent.websiteUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-1 text-primary-600 hover:text-primary-700"
                    >
                      <ExternalLink className="h-3 w-3" />
                      –°–∞–π—Ç
                    </a>
                  )}
                </div>

                <div className="mt-4 pt-4 border-t border-gray-100">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleGetWidgetCode(agent.id, agent.name);
                    }}
                    className="btn-secondary w-full text-sm"
                  >
                    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–∏–¥–∂–µ—Ç–∞
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Stats */}
        {agents.length > 0 && (
          <div className="mt-12 grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white rounded-lg border p-6">
              <div className="flex items-center gap-3 mb-2">
                <Bot className="h-8 w-8 text-primary-600" />
                <div>
                  <p className="text-2xl font-bold text-gray-900">{agents.length}</p>
                  <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤</p>
                </div>
              </div>
            </div>
            
            <div className="bg-white rounded-lg border p-6">
              <div className="flex items-center gap-3 mb-2">
                <BarChart3 className="h-8 w-8 text-green-600" />
                <div>
                  <p className="text-2xl font-bold text-gray-900">‚Äî</p>
                  <p className="text-sm text-gray-600">–î–∏–∞–ª–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è</p>
                </div>
              </div>
            </div>
            
            <div className="bg-white rounded-lg border p-6">
              <div className="flex items-center gap-3 mb-2">
                <Settings className="h-8 w-8 text-purple-600" />
                <div>
                  <p className="text-2xl font-bold text-gray-900">‚Äî</p>
                  <p className="text-sm text-gray-600">–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Dashboard; 