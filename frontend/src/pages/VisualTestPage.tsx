import React, { useState } from 'react';
import { analysisAPI } from '../services/api';

const VisualTestPage: React.FC = () => {
  const [url, setUrl] = useState('http://localhost:3000/');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [screenshot, setScreenshot] = useState<string>('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const [automationAction, setAutomationAction] = useState('click');
  const [buttonText, setButtonText] = useState('–í–æ–π—Ç–∏');
  const [automationResult, setAutomationResult] = useState<any>(null);
  const [automationLoading, setAutomationLoading] = useState(false);

  const handleAnalyze = async () => {
    setLoading(true);
    try {
      const analysisResponse = await analysisAPI.analyzePage({ url, agentId: 'test' });
      setResult(analysisResponse.data);
      
      // –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
      const screenshotResponse = await analysisAPI.captureScreenshot({ url });
      if (screenshotResponse.data.screenshot) {
        setScreenshot(`data:image/jpeg;base64,${screenshotResponse.data.screenshot}`);
      }
    } catch (error) {
      console.error('Error analyzing page:', error);
      setResult({ error: 'Failed to analyze page' });
    } finally {
      setLoading(false);
    }
  };

  const handleAutomation = async () => {
    setAutomationLoading(true);
    try {
      const response = await fetch('/api/analysis/automate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: automationAction,
          url: url,
          params: {
            buttonText: buttonText,
            waitForNavigation: true
          }
        }),
      });

      const data = await response.json();
      setAutomationResult(data);
    } catch (error) {
      console.error('Error with automation:', error);
      setAutomationResult({ error: 'Failed to execute automation' });
    } finally {
      setAutomationLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <h1 className="text-2xl font-bold text-gray-900 mb-6">
            ü§ñ –¢–µ—Å—Ç Vision AI + Browser Automation
          </h1>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ */}
            <div className="space-y-4">
              <h2 className="text-lg font-semibold text-gray-800">üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h2>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
                </label>
                <input
                  type="url"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="https://example.com"
                />
              </div>

              <button
                onClick={handleAnalyze}
                disabled={loading}
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'}
              </button>
            </div>

            {/* –ü–∞–Ω–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ */}
            <div className="space-y-4">
              <h2 className="text-lg font-semibold text-gray-800">ü§ñ Browser Automation</h2>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –î–µ–π—Å—Ç–≤–∏–µ:
                </label>
                <select
                  value={automationAction}
                  onChange={(e) => setAutomationAction(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  <option value="click">–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É</option>
                  <option value="find_button">–ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:
                </label>
                <input
                  type="text"
                  value={buttonText}
                  onChange={(e) => setButtonText(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="–í–æ–π—Ç–∏"
                />
              </div>

              <button
                onClick={handleAutomation}
                disabled={automationLoading}
                className="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {automationLoading ? 'üîÑ –í—ã–ø–æ–ª–Ω—è—é...' : 'üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ'}
              </button>

              {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã */}
              <div className="border-t pt-4">
                <h3 className="text-sm font-medium text-gray-700 mb-2">üéØ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</h3>
                <div className="grid grid-cols-2 gap-2">
                  <button
                    onClick={() => {
                      setButtonText('–í–æ–π—Ç–∏');
                      setAutomationAction('click');
                    }}
                    className="text-xs bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded"
                  >
                    –í–æ–π—Ç–∏
                  </button>
                  <button
                    onClick={() => {
                      setButtonText('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
                      setAutomationAction('click');
                    }}
                    className="text-xs bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded"
                  >
                    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                  </button>
                  <button
                    onClick={() => {
                      setButtonText('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É');
                      setAutomationAction('click');
                    }}
                    className="text-xs bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded"
                  >
                    –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                  </button>
                  <button
                    onClick={() => {
                      setButtonText('Dashboard');
                      setAutomationAction('click');
                    }}
                    className="text-xs bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded"
                  >
                    Dashboard
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ */}
          {result && (
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-lg font-semibold text-gray-800 mb-4">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h2>
              
              {result.error ? (
                <div className="text-red-600">
                  <p className="font-medium">–û—à–∏–±–∫–∞:</p>
                  <p>{result.error}</p>
                </div>
              ) : (
                <div className="space-y-3">
                  <div>
                    <p className="font-medium text-gray-700">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</p>
                    <p className="text-gray-600">{result.analysis?.title || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
                  </div>
                  
                  <div>
                    <p className="font-medium text-gray-700">URL:</p>
                    <p className="text-gray-600 text-sm break-all">{result.analysis?.url}</p>
                  </div>
                  
                  {result.analysis?.buttons && result.analysis.buttons.length > 0 && (
                    <div>
                      <p className="font-medium text-gray-700">–ö–Ω–æ–ø–∫–∏:</p>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {result.analysis.buttons.slice(0, 5).map((button: string, index: number) => (
                          <span key={index} className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                            {button}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {result.visualDescription && (
                    <div>
                      <p className="font-medium text-gray-700">AI –æ–ø–∏—Å–∞–Ω–∏–µ:</p>
                      <p className="text-gray-600 text-sm">{result.visualDescription.slice(0, 200)}...</p>
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ */}
          {automationResult && (
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-lg font-semibold text-gray-800 mb-4">ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h2>
              
              {automationResult.error ? (
                <div className="text-red-600">
                  <p className="font-medium">–û—à–∏–±–∫–∞:</p>
                  <p>{automationResult.error}</p>
                </div>
              ) : (
                <div className="space-y-3">
                  <div className={`p-3 rounded-md ${automationResult.success ? 'bg-green-50 border-l-4 border-green-400' : 'bg-red-50 border-l-4 border-red-400'}`}>
                    <p className={`font-medium ${automationResult.success ? 'text-green-800' : 'text-red-800'}`}>
                      {automationResult.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
                    </p>
                    <p className={`text-sm ${automationResult.success ? 'text-green-700' : 'text-red-700'}`}>
                      {automationResult.message}
                    </p>
                  </div>
                  
                  {automationResult.data?.newUrl && (
                    <div>
                      <p className="font-medium text-gray-700">–ù–æ–≤—ã–π URL:</p>
                      <p className="text-gray-600 text-sm break-all">{automationResult.data.newUrl}</p>
                    </div>
                  )}
                  
                  {automationResult.data?.selector && (
                    <div>
                      <p className="font-medium text-gray-700">–ù–∞–π–¥–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä:</p>
                      <code className="text-xs bg-gray-100 px-2 py-1 rounded">{automationResult.data.selector}</code>
                    </div>
                  )}
                </div>
              )}
            </div>
          )}
        </div>

        {/* –°–∫—Ä–∏–Ω—à–æ—Ç */}
        {screenshot && (
          <div className="bg-white rounded-lg shadow-sm p-6 mt-6">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h2>
            <img 
              src={screenshot} 
              alt="Screenshot" 
              className="max-w-full h-auto border border-gray-200 rounded-md shadow-sm"
            />
          </div>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <div className="bg-blue-50 rounded-lg p-6 mt-6">
          <h2 className="text-lg font-semibold text-blue-900 mb-4">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800">
            <div>
              <h3 className="font-medium mb-2">üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</h3>
              <ul className="space-y-1">
                <li>‚Ä¢ –í–≤–µ–¥–∏—Ç–µ URL –ª—é–±–æ–≥–æ —Å–∞–π—Ç–∞</li>
                <li>‚Ä¢ AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
                <li>‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ</li>
              </ul>
            </div>
            <div>
              <h3 className="font-medium mb-2">ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:</h3>
              <ul className="space-y-1">
                <li>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –∫–Ω–æ–ø–∫—É</li>
                <li>‚Ä¢ AI –Ω–∞–π–¥–µ—Ç –∏ –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
                <li>‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å –≤–∏–¥–∂–µ—Ç–æ–º —á–∞—Ç–∞!</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VisualTestPage; 